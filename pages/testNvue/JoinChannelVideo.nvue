<template>
	<div class="container">
		<view class="top">
			<input class="input" placeholder="Channel ID" @input="replaceInput" v-model="channelId" />
			<button type="primary"
				@click="isJoined ? leaveChannel() : joinChannel()">{{`${isJoined ? 'Leave' : 'Join'} channel`}}</button>
		</view>
		<view class="container">
			<rtc-surface-view v-if="isPreviewSuccess" class="local" :uid="0"></rtc-surface-view>
			<!-- <scroll-view class="remoteContainer" scroll-x="true">
				<view class="remote" v-for="(item, index) in remoteUid" :key="index">
					<rtc-surface-view class="remote" :uid="item" :zOrderMediaOverlay="true"></rtc-surface-view>
				</view>
			</scroll-view> -->
		</view>
		<view class="float">
			<button type="primary" @click="switchCamera">{{`Camera ${isSwitchCamera ? 'front' : 'rear'}`}}</button>
		</view>
	</div>
</template>
<script>
	import {
		AGORA_APP_ID
	} from '@/components/emCallKit/contants/index.js';
	import {
		requestRtcChannelToken
	} from "@/components/emCallKit/utils/request.js";
	import {
		requestAndroidPermission
	} from '@/components/emCallKit/utils/permision.js'
	import RtcEngine, {
		RtcChannel
	} from '@/components/Agora-RTC-JS/index';
	import {
		ClientRole,
		ChannelProfile
	} from '@/components/Agora-RTC-JS/common/Enums';
	import RtcSurfaceView from '@/components/Agora-RTC-JS/RtcSurfaceView';
	const config = {
		token: "00615cb0d28b87b425ea613fc46f7c9f974IAD46TmG8Yku9BYlN1/lGfVvRzqMgKrp2v/Xuy2H2c8K3QZr4u8iUDFwIgCTqPxy8/21ZAQAAQDz/bVkAgDz/bVkAwDz/bVkBADz/bVk",
		uid: 1604405137,
		channelId: "2_658134d2-07a1-442a-9b8b-50f91337c39a"
	}
	export default {
		components: {
			RtcSurfaceView: RtcSurfaceView
		},
		data() {
			return {
				engine: undefined,
				channelId: config.channelId,
				isJoined: false,
				isPreviewSuccess: false,
				remoteUid: [],
				isSwitchCamera: true,
				isSwitchRender: true
			}
		},
		onLoad() {
			console.log('onLoad');
			this.initEngine();
		},
		onBackPress() {
			console.log('onBackPress');
			this.engine && this.engine.destroy();
		},
		methods: {
			async initEngine() {
				console.log('》》》》》》初始化声网RTC', config)
				try {
					this.engine = await RtcEngine.create(AGORA_APP_ID);
					this.addListeners()
					await this.engine.enableVideo();

					// await this.engine.startPreview();
					await this.engine.setChannelProfile(ChannelProfile.LiveBroadcasting);
					await this.engine.setClientRole(ClientRole.Broadcaster);
										this.startPreview()
				} catch (e) {
					//TODO handle the exception
					console.log('>>>>>>>初始化失败', e)
				}



			},
			startPreview() {
				this.engine.startPreview().then(() => {
					this.isPreviewSuccess = true
					console.log('>>>>>>预览已开启')
				}).catch((e) => {
					console.log('>>>>>预览开启失败', e)
				})
			},
			addListeners() {
				this.engine.addListener('JoinChannelSuccess', (channel, uid, elapsed) => {
					console.info('JoinChannelSuccess', channel, uid, elapsed);
					this.isJoined = true;
				});
				this.engine.addListener('UserJoined', (uid, elapsed) => {
					console.info('UserJoined', uid, elapsed);
					this.remoteUid = [...this.remoteUid, uid];
				});
				this.engine.addListener('UserOffline', (uid, reason) => {
					console.info('UserOffline', uid, reason);
					this.remoteUid = this.remoteUid.filter((value) => value !== uid);
				});
				this.engine.addListener('LeaveChannel', (stats) => {
					console.info('LeaveChannel', stats);
					this.isJoined = false;
					this.remoteUid = [];
				});
			},
			async joinChannel() {
				if (uni.getSystemInfoSync().platform === 'android') {
					requestAndroidPermission('android.permission.RECORD_AUDIO');
					requestAndroidPermission('android.permission.CAMERA');
				}
				console.log('<<<<<>>>>>>调用了加入', config.token, this.channelId, config.uid)
				try {
					await this.engine &&
						this.engine.joinChannel(
							config.token,
							this.channelId,
							null,
							config.uid
						);
					// setTimeout(async ()=>{
					// 	await this.engine &&
					// 		this.engine.joinChannelWithUserAccount(
					// 			config.token,
					// 			this.channelId,
					// 			config.uid
					// 		);
					// },1000)

					console.log('>>>>>加入成功')
				} catch (e) {
					//TODO handle the exception
					console.log('>>>>>>加入失败', e)
				}

			},
			async leaveChannel() {
				await this.engine && this.engine.leaveChannel();
			},
			switchCamera() {
				this.engine &&
					this.engine.switchCamera()
					.then(() => {
						this.isSwitchCamera = !this.isSwitchCamera;
					})
					.catch((err) => {
						console.warn('switchCamera', err);
					});
			},
			switchRender() {
				this.isSwitchRender = !this.isSwitchRender;
				this.remoteUid = this.remoteUid.reverse();
			},
			replaceInput(event) {
				this.channelId = event.detail.value;
			}
		}
	}
</script>
<style>
	.container {
		flex: 1;
	}

	.float {
		position: absolute;
		right: 0;
		bottom: 0;
	}

	.top {
		/* width: 100%; */
	}

	.input {
		borderColor: gray;
		borderWidth: 1;
	}

	.local {
		flex: 1;
	}

	.remoteContainer {
		position: absolute;
		left: 0;
		top: 0;
		flex-direction: row;
	}

	.remote {
		width: 120;
		height: 120;
	}
</style>